class Solution {
public:

    int check(int n){
        int count =0;
        for(int i =1;i<=n;i++){
            if(n%i == 0){
                count++;
            }
        }

        if(count == 2){
            return 1;
        }
        else{
            return 0;
        }
    }


    vector<int> closestPrimes(int left, int right) {
        
        vector<int> v1;
        vector<int> v;

        if(left == 1 && right>=3){
            v1.push_back(2);
            v1.push_back(3);
            return v1;
        }


        for(int i =left ; i<=right ;i++){

            bool flg = true;
            for(int j=2;j*j<=i;j++){
                if(i%j==0){
                    flg = false;
                    break;
                }
            }
            if(flg && i!=1) v.push_back(i);
        }
        

        //priority_queue<pair<int,int>> pq;

        int m= INT_MAX;
        int temp1;
        int temp2;

        for(int i =1;i<v.size();i++){
            int d= v[i]-v[i-1];

            if(d<m){
                m=d;
                 temp1=v[i];
                temp2=v[i-1];
            }
        }

        vector<int>temp{-1,-1};
        vector<int>ans;

        ans.push_back(temp2);
        ans.push_back(temp1);
        

        if(v.size() <2){
            return temp;
        }
        else{
            return ans;
        }

/*
vector<int> closestPrimes(int left, int right) {
        vector<int> arr;
        for(int i=left;i<=right;i++){
            bool flg = true;
            for(int j=2;j*j<=i;j++){
                if(i%j==0){
                    flg = false;
                    break;
                }
            }
            if(flg && i!=1) arr.push_back(i);
        }
        int ind=0,mn=INT_MAX;
        if(arr.size()<2) return {-1,-1};
        for(int i=0;i<arr.size()-1;i++){
            if((arr[i+1]-arr[i])<mn){
                mn = (arr[i+1]-arr[i]);
                ind = i;
            }
        }
        return {arr[ind],arr[ind+1]};
    }

    */

    }
};
