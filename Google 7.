class Solution {
public:
    int countDistinct(vector<int>& nums, int k, int p) {
        
        int n = nums.size();
        set<vector<int>> v;

        for(int i =0;i<n;i++){
            int cnt=0;
            vector<int> t;
            for(int j=i;j<n;j++){

                t.push_back(nums[j]);
                if(nums[j] % p == 0){
                    cnt++;
                    
                }
                
                if(cnt>k){
                    
                    break;
                }
                v.insert(t);

            }
        }

        return v.size();
    }
};

/*
class Solution {
public:
    int countDistinct(vector<int>& nums, int k, int p) {
        int cnt[201] = {}, hash[201] = {}, res = 0;
    for (int sz = 0; sz < nums.size(); ++sz) {
        unordered_set<int> s;
        for (int i = 0; i + sz < nums.size(); ++i) {
            cnt[i] += nums[i + sz] % p == 0;
            if (cnt[i] <= k) {
                hash[i] = ((long long)hash[i] * 200 + nums[i + sz]) % 1000000007;
                res += s.insert(hash[i]).second;
            }
        }
    }
    return res;
    }
};
