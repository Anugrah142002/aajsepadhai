class Solution {
public:
     int getLastMoment(int n, vector<int>& left, vector<int>& right) {

int lmax,rmin;
            if(left.empty()){
             lmax = 0;
            }
            else{
             lmax= *max_element(left.begin() , left.end());

            }

            if(right.empty()){
                rmin = n;

            }
            else{
                rmin= *min_element(right.begin() , right.end());
            }


int ans = max(lmax,n-rmin);
return ans;




        


    }
};

/*------------------------------------------------------------------------

class Solution {
public:
    int getLastMoment(int n, vector<int>& left, vector<int>& right) {
        int max_time=0;
        for(int i=0;i<int(left.size());i++){
            max_time=max(left[i],max_time);
        }
        for(int i=0;i<int(right.size());i++){
            max_time=max(n-right[i],max_time);
        }
        return max_time;
    }
};


// int maxLeft = left.empty() ? 0 : *max_element(left.begin(), left.end());
        //  int minRight = right.empty() ? n : *min_element(right.begin(), right.end());
        // return max(maxLeft, n - minRight);

